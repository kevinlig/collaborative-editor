// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TransmissionMessage.pb.h"
// @@protoc_insertion_point(imports)

@implementation TransmissionMessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TransmissionMessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Transmission ()
@property TransmissionMessageType type;
@property SInt32 sequenceId;
@property (strong) NSString* serverName;
@property (strong) NSString* userName;
@property (strong) NSMutableArray * userListArray;
@property (strong) TransmissionDocument* document;
@property SInt32 ackSender;
@property (strong) NSMutableArray * queueItemsArray;
@property (strong) TransmissionChangeItem* changeItem;
@property (strong) NSMutableArray * statesArray;
@end

@implementation Transmission

- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasSequenceId {
  return !!hasSequenceId_;
}
- (void) setHasSequenceId:(BOOL) _value_ {
  hasSequenceId_ = !!_value_;
}
@synthesize sequenceId;
- (BOOL) hasServerName {
  return !!hasServerName_;
}
- (void) setHasServerName:(BOOL) _value_ {
  hasServerName_ = !!_value_;
}
@synthesize serverName;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
@synthesize userListArray;
@dynamic userList;
- (BOOL) hasDocument {
  return !!hasDocument_;
}
- (void) setHasDocument:(BOOL) _value_ {
  hasDocument_ = !!_value_;
}
@synthesize document;
- (BOOL) hasAckSender {
  return !!hasAckSender_;
}
- (void) setHasAckSender:(BOOL) _value_ {
  hasAckSender_ = !!_value_;
}
@synthesize ackSender;
@synthesize queueItemsArray;
@dynamic queueItems;
- (BOOL) hasChangeItem {
  return !!hasChangeItem_;
}
- (void) setHasChangeItem:(BOOL) _value_ {
  hasChangeItem_ = !!_value_;
}
@synthesize changeItem;
@synthesize statesArray;
@dynamic states;
- (instancetype) init {
  if ((self = [super init])) {
    self.type = TransmissionMessageTypeInitial;
    self.sequenceId = 0;
    self.serverName = @"";
    self.userName = @"";
    self.document = [TransmissionDocument defaultInstance];
    self.ackSender = 0;
    self.changeItem = [TransmissionChangeItem defaultInstance];
  }
  return self;
}
static Transmission* defaultTransmissionInstance = nil;
+ (void) initialize {
  if (self == [Transmission class]) {
    defaultTransmissionInstance = [[Transmission alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTransmissionInstance;
}
- (instancetype) defaultInstance {
  return defaultTransmissionInstance;
}
- (NSArray *)userList {
  return userListArray;
}
- (TransmissionUser*)userListAtIndex:(NSUInteger)index {
  return [userListArray objectAtIndex:index];
}
- (NSArray *)queueItems {
  return queueItemsArray;
}
- (TransmissionQueueItem*)queueItemsAtIndex:(NSUInteger)index {
  return [queueItemsArray objectAtIndex:index];
}
- (NSArray *)states {
  return statesArray;
}
- (TransmissionUserState*)statesAtIndex:(NSUInteger)index {
  return [statesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasType) {
    return NO;
  }
  __block BOOL isInituserList = YES;
   [self.userList enumerateObjectsUsingBlock:^(TransmissionUser *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInituserList = NO;
      *stop = YES;
    }
  }];
  if (!isInituserList) return isInituserList;
  __block BOOL isInitqueueItems = YES;
   [self.queueItems enumerateObjectsUsingBlock:^(TransmissionQueueItem *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitqueueItems = NO;
      *stop = YES;
    }
  }];
  if (!isInitqueueItems) return isInitqueueItems;
  if (self.hasChangeItem) {
    if (!self.changeItem.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasType) {
    [output writeEnum:1 value:self.type];
  }
  if (self.hasSequenceId) {
    [output writeInt32:2 value:self.sequenceId];
  }
  if (self.hasServerName) {
    [output writeString:3 value:self.serverName];
  }
  if (self.hasUserName) {
    [output writeString:4 value:self.userName];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(TransmissionUser *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  if (self.hasDocument) {
    [output writeMessage:6 value:self.document];
  }
  if (self.hasAckSender) {
    [output writeInt32:7 value:self.ackSender];
  }
  [self.queueItemsArray enumerateObjectsUsingBlock:^(TransmissionQueueItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  if (self.hasChangeItem) {
    [output writeMessage:9 value:self.changeItem];
  }
  [self.statesArray enumerateObjectsUsingBlock:^(TransmissionUserState *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasType) {
    size_ += computeEnumSize(1, self.type);
  }
  if (self.hasSequenceId) {
    size_ += computeInt32Size(2, self.sequenceId);
  }
  if (self.hasServerName) {
    size_ += computeStringSize(3, self.serverName);
  }
  if (self.hasUserName) {
    size_ += computeStringSize(4, self.userName);
  }
  [self.userListArray enumerateObjectsUsingBlock:^(TransmissionUser *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  if (self.hasDocument) {
    size_ += computeMessageSize(6, self.document);
  }
  if (self.hasAckSender) {
    size_ += computeInt32Size(7, self.ackSender);
  }
  [self.queueItemsArray enumerateObjectsUsingBlock:^(TransmissionQueueItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  if (self.hasChangeItem) {
    size_ += computeMessageSize(9, self.changeItem);
  }
  [self.statesArray enumerateObjectsUsingBlock:^(TransmissionUserState *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Transmission*) parseFromData:(NSData*) data {
  return (Transmission*)[[[Transmission builder] mergeFromData:data] build];
}
+ (Transmission*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Transmission*)[[[Transmission builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Transmission*) parseFromInputStream:(NSInputStream*) input {
  return (Transmission*)[[[Transmission builder] mergeFromInputStream:input] build];
}
+ (Transmission*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Transmission*)[[[Transmission builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Transmission*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Transmission*)[[[Transmission builder] mergeFromCodedInputStream:input] build];
}
+ (Transmission*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Transmission*)[[[Transmission builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionBuilder*) builder {
  return [[TransmissionBuilder alloc] init];
}
+ (TransmissionBuilder*) builderWithPrototype:(Transmission*) prototype {
  return [[Transmission builder] mergeFrom:prototype];
}
- (TransmissionBuilder*) builder {
  return [Transmission builder];
}
- (TransmissionBuilder*) toBuilder {
  return [Transmission builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", NSStringFromTransmissionMessageType(self.type)];
  }
  if (self.hasSequenceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceId", [NSNumber numberWithInteger:self.sequenceId]];
  }
  if (self.hasServerName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverName", self.serverName];
  }
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(TransmissionUser *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDocument) {
    [output appendFormat:@"%@%@ {\n", indent, @"document"];
    [self.document writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAckSender) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ackSender", [NSNumber numberWithInteger:self.ackSender]];
  }
  [self.queueItemsArray enumerateObjectsUsingBlock:^(TransmissionQueueItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"queueItems"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasChangeItem) {
    [output appendFormat:@"%@%@ {\n", indent, @"changeItem"];
    [self.changeItem writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.statesArray enumerateObjectsUsingBlock:^(TransmissionUserState *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"states"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Transmission class]]) {
    return NO;
  }
  Transmission *otherMessage = other;
  return
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasSequenceId == otherMessage.hasSequenceId &&
      (!self.hasSequenceId || self.sequenceId == otherMessage.sequenceId) &&
      self.hasServerName == otherMessage.hasServerName &&
      (!self.hasServerName || [self.serverName isEqual:otherMessage.serverName]) &&
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      [self.userListArray isEqualToArray:otherMessage.userListArray] &&
      self.hasDocument == otherMessage.hasDocument &&
      (!self.hasDocument || [self.document isEqual:otherMessage.document]) &&
      self.hasAckSender == otherMessage.hasAckSender &&
      (!self.hasAckSender || self.ackSender == otherMessage.ackSender) &&
      [self.queueItemsArray isEqualToArray:otherMessage.queueItemsArray] &&
      self.hasChangeItem == otherMessage.hasChangeItem &&
      (!self.hasChangeItem || [self.changeItem isEqual:otherMessage.changeItem]) &&
      [self.statesArray isEqualToArray:otherMessage.statesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasSequenceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sequenceId] hash];
  }
  if (self.hasServerName) {
    hashCode = hashCode * 31 + [self.serverName hash];
  }
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  [self.userListArray enumerateObjectsUsingBlock:^(TransmissionUser *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDocument) {
    hashCode = hashCode * 31 + [self.document hash];
  }
  if (self.hasAckSender) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ackSender] hash];
  }
  [self.queueItemsArray enumerateObjectsUsingBlock:^(TransmissionQueueItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasChangeItem) {
    hashCode = hashCode * 31 + [self.changeItem hash];
  }
  [self.statesArray enumerateObjectsUsingBlock:^(TransmissionUserState *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TransmissionMessageTypeIsValidValue(TransmissionMessageType value) {
  switch (value) {
    case TransmissionMessageTypeInitial:
    case TransmissionMessageTypeState:
    case TransmissionMessageTypeSequence:
    case TransmissionMessageTypeAck:
    case TransmissionMessageTypeReqQueue:
    case TransmissionMessageTypeReqState:
    case TransmissionMessageTypeUpdateQueue:
    case TransmissionMessageTypeUpdateState:
    case TransmissionMessageTypeForceText:
    case TransmissionMessageTypeUserList:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromTransmissionMessageType(TransmissionMessageType value) {
  switch (value) {
    case TransmissionMessageTypeInitial:
      return @"TransmissionMessageTypeInitial";
    case TransmissionMessageTypeState:
      return @"TransmissionMessageTypeState";
    case TransmissionMessageTypeSequence:
      return @"TransmissionMessageTypeSequence";
    case TransmissionMessageTypeAck:
      return @"TransmissionMessageTypeAck";
    case TransmissionMessageTypeReqQueue:
      return @"TransmissionMessageTypeReqQueue";
    case TransmissionMessageTypeReqState:
      return @"TransmissionMessageTypeReqState";
    case TransmissionMessageTypeUpdateQueue:
      return @"TransmissionMessageTypeUpdateQueue";
    case TransmissionMessageTypeUpdateState:
      return @"TransmissionMessageTypeUpdateState";
    case TransmissionMessageTypeForceText:
      return @"TransmissionMessageTypeForceText";
    case TransmissionMessageTypeUserList:
      return @"TransmissionMessageTypeUserList";
    default:
      return nil;
  }
}

@interface TransmissionUser ()
@property (strong) NSString* id;
@property (strong) NSString* userName;
@property (strong) NSString* color;
@end

@implementation TransmissionUser

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) _value_ {
  hasColor_ = !!_value_;
}
@synthesize color;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = @"";
    self.userName = @"";
    self.color = @"";
  }
  return self;
}
static TransmissionUser* defaultTransmissionUserInstance = nil;
+ (void) initialize {
  if (self == [TransmissionUser class]) {
    defaultTransmissionUserInstance = [[TransmissionUser alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTransmissionUserInstance;
}
- (instancetype) defaultInstance {
  return defaultTransmissionUserInstance;
}
- (BOOL) isInitialized {
  if (!self.hasId) {
    return NO;
  }
  if (!self.hasUserName) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasUserName) {
    [output writeString:2 value:self.userName];
  }
  if (self.hasColor) {
    [output writeString:3 value:self.color];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasUserName) {
    size_ += computeStringSize(2, self.userName);
  }
  if (self.hasColor) {
    size_ += computeStringSize(3, self.color);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TransmissionUser*) parseFromData:(NSData*) data {
  return (TransmissionUser*)[[[TransmissionUser builder] mergeFromData:data] build];
}
+ (TransmissionUser*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionUser*)[[[TransmissionUser builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TransmissionUser*) parseFromInputStream:(NSInputStream*) input {
  return (TransmissionUser*)[[[TransmissionUser builder] mergeFromInputStream:input] build];
}
+ (TransmissionUser*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionUser*)[[[TransmissionUser builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionUser*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TransmissionUser*)[[[TransmissionUser builder] mergeFromCodedInputStream:input] build];
}
+ (TransmissionUser*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionUser*)[[[TransmissionUser builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionUserBuilder*) builder {
  return [[TransmissionUserBuilder alloc] init];
}
+ (TransmissionUserBuilder*) builderWithPrototype:(TransmissionUser*) prototype {
  return [[TransmissionUser builder] mergeFrom:prototype];
}
- (TransmissionUserBuilder*) builder {
  return [TransmissionUser builder];
}
- (TransmissionUserBuilder*) toBuilder {
  return [TransmissionUser builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"color", self.color];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TransmissionUser class]]) {
    return NO;
  }
  TransmissionUser *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasColor == otherMessage.hasColor &&
      (!self.hasColor || [self.color isEqual:otherMessage.color]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasColor) {
    hashCode = hashCode * 31 + [self.color hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TransmissionUserBuilder()
@property (strong) TransmissionUser* resultUser;
@end

@implementation TransmissionUserBuilder
@synthesize resultUser;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUser = [[TransmissionUser alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUser;
}
- (TransmissionUserBuilder*) clear {
  self.resultUser = [[TransmissionUser alloc] init];
  return self;
}
- (TransmissionUserBuilder*) clone {
  return [TransmissionUser builderWithPrototype:resultUser];
}
- (TransmissionUser*) defaultInstance {
  return [TransmissionUser defaultInstance];
}
- (TransmissionUser*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TransmissionUser*) buildPartial {
  TransmissionUser* returnMe = resultUser;
  self.resultUser = nil;
  return returnMe;
}
- (TransmissionUserBuilder*) mergeFrom:(TransmissionUser*) other {
  if (other == [TransmissionUser defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasColor) {
    [self setColor:other.color];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TransmissionUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TransmissionUserBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setUserName:[input readString]];
        break;
      }
      case 26: {
        [self setColor:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultUser.hasId;
}
- (NSString*) id {
  return resultUser.id;
}
- (TransmissionUserBuilder*) setId:(NSString*) value {
  resultUser.hasId = YES;
  resultUser.id = value;
  return self;
}
- (TransmissionUserBuilder*) clearId {
  resultUser.hasId = NO;
  resultUser.id = @"";
  return self;
}
- (BOOL) hasUserName {
  return resultUser.hasUserName;
}
- (NSString*) userName {
  return resultUser.userName;
}
- (TransmissionUserBuilder*) setUserName:(NSString*) value {
  resultUser.hasUserName = YES;
  resultUser.userName = value;
  return self;
}
- (TransmissionUserBuilder*) clearUserName {
  resultUser.hasUserName = NO;
  resultUser.userName = @"";
  return self;
}
- (BOOL) hasColor {
  return resultUser.hasColor;
}
- (NSString*) color {
  return resultUser.color;
}
- (TransmissionUserBuilder*) setColor:(NSString*) value {
  resultUser.hasColor = YES;
  resultUser.color = value;
  return self;
}
- (TransmissionUserBuilder*) clearColor {
  resultUser.hasColor = NO;
  resultUser.color = @"";
  return self;
}
@end

@interface TransmissionDocument ()
@property (strong) NSString* documentText;
@property (strong) NSString* documentName;
@end

@implementation TransmissionDocument

- (BOOL) hasDocumentText {
  return !!hasDocumentText_;
}
- (void) setHasDocumentText:(BOOL) _value_ {
  hasDocumentText_ = !!_value_;
}
@synthesize documentText;
- (BOOL) hasDocumentName {
  return !!hasDocumentName_;
}
- (void) setHasDocumentName:(BOOL) _value_ {
  hasDocumentName_ = !!_value_;
}
@synthesize documentName;
- (instancetype) init {
  if ((self = [super init])) {
    self.documentText = @"";
    self.documentName = @"";
  }
  return self;
}
static TransmissionDocument* defaultTransmissionDocumentInstance = nil;
+ (void) initialize {
  if (self == [TransmissionDocument class]) {
    defaultTransmissionDocumentInstance = [[TransmissionDocument alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTransmissionDocumentInstance;
}
- (instancetype) defaultInstance {
  return defaultTransmissionDocumentInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDocumentText) {
    [output writeString:1 value:self.documentText];
  }
  if (self.hasDocumentName) {
    [output writeString:2 value:self.documentName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDocumentText) {
    size_ += computeStringSize(1, self.documentText);
  }
  if (self.hasDocumentName) {
    size_ += computeStringSize(2, self.documentName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TransmissionDocument*) parseFromData:(NSData*) data {
  return (TransmissionDocument*)[[[TransmissionDocument builder] mergeFromData:data] build];
}
+ (TransmissionDocument*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionDocument*)[[[TransmissionDocument builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TransmissionDocument*) parseFromInputStream:(NSInputStream*) input {
  return (TransmissionDocument*)[[[TransmissionDocument builder] mergeFromInputStream:input] build];
}
+ (TransmissionDocument*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionDocument*)[[[TransmissionDocument builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionDocument*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TransmissionDocument*)[[[TransmissionDocument builder] mergeFromCodedInputStream:input] build];
}
+ (TransmissionDocument*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionDocument*)[[[TransmissionDocument builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionDocumentBuilder*) builder {
  return [[TransmissionDocumentBuilder alloc] init];
}
+ (TransmissionDocumentBuilder*) builderWithPrototype:(TransmissionDocument*) prototype {
  return [[TransmissionDocument builder] mergeFrom:prototype];
}
- (TransmissionDocumentBuilder*) builder {
  return [TransmissionDocument builder];
}
- (TransmissionDocumentBuilder*) toBuilder {
  return [TransmissionDocument builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDocumentText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"documentText", self.documentText];
  }
  if (self.hasDocumentName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"documentName", self.documentName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TransmissionDocument class]]) {
    return NO;
  }
  TransmissionDocument *otherMessage = other;
  return
      self.hasDocumentText == otherMessage.hasDocumentText &&
      (!self.hasDocumentText || [self.documentText isEqual:otherMessage.documentText]) &&
      self.hasDocumentName == otherMessage.hasDocumentName &&
      (!self.hasDocumentName || [self.documentName isEqual:otherMessage.documentName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDocumentText) {
    hashCode = hashCode * 31 + [self.documentText hash];
  }
  if (self.hasDocumentName) {
    hashCode = hashCode * 31 + [self.documentName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TransmissionDocumentBuilder()
@property (strong) TransmissionDocument* resultDocument;
@end

@implementation TransmissionDocumentBuilder
@synthesize resultDocument;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDocument = [[TransmissionDocument alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDocument;
}
- (TransmissionDocumentBuilder*) clear {
  self.resultDocument = [[TransmissionDocument alloc] init];
  return self;
}
- (TransmissionDocumentBuilder*) clone {
  return [TransmissionDocument builderWithPrototype:resultDocument];
}
- (TransmissionDocument*) defaultInstance {
  return [TransmissionDocument defaultInstance];
}
- (TransmissionDocument*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TransmissionDocument*) buildPartial {
  TransmissionDocument* returnMe = resultDocument;
  self.resultDocument = nil;
  return returnMe;
}
- (TransmissionDocumentBuilder*) mergeFrom:(TransmissionDocument*) other {
  if (other == [TransmissionDocument defaultInstance]) {
    return self;
  }
  if (other.hasDocumentText) {
    [self setDocumentText:other.documentText];
  }
  if (other.hasDocumentName) {
    [self setDocumentName:other.documentName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TransmissionDocumentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TransmissionDocumentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDocumentText:[input readString]];
        break;
      }
      case 18: {
        [self setDocumentName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDocumentText {
  return resultDocument.hasDocumentText;
}
- (NSString*) documentText {
  return resultDocument.documentText;
}
- (TransmissionDocumentBuilder*) setDocumentText:(NSString*) value {
  resultDocument.hasDocumentText = YES;
  resultDocument.documentText = value;
  return self;
}
- (TransmissionDocumentBuilder*) clearDocumentText {
  resultDocument.hasDocumentText = NO;
  resultDocument.documentText = @"";
  return self;
}
- (BOOL) hasDocumentName {
  return resultDocument.hasDocumentName;
}
- (NSString*) documentName {
  return resultDocument.documentName;
}
- (TransmissionDocumentBuilder*) setDocumentName:(NSString*) value {
  resultDocument.hasDocumentName = YES;
  resultDocument.documentName = value;
  return self;
}
- (TransmissionDocumentBuilder*) clearDocumentName {
  resultDocument.hasDocumentName = NO;
  resultDocument.documentName = @"";
  return self;
}
@end

@interface TransmissionQueueItem ()
@property SInt32 sequenceId;
@property (strong) NSData* diff;
@end

@implementation TransmissionQueueItem

- (BOOL) hasSequenceId {
  return !!hasSequenceId_;
}
- (void) setHasSequenceId:(BOOL) _value_ {
  hasSequenceId_ = !!_value_;
}
@synthesize sequenceId;
- (BOOL) hasDiff {
  return !!hasDiff_;
}
- (void) setHasDiff:(BOOL) _value_ {
  hasDiff_ = !!_value_;
}
@synthesize diff;
- (instancetype) init {
  if ((self = [super init])) {
    self.sequenceId = 0;
    self.diff = [NSData data];
  }
  return self;
}
static TransmissionQueueItem* defaultTransmissionQueueItemInstance = nil;
+ (void) initialize {
  if (self == [TransmissionQueueItem class]) {
    defaultTransmissionQueueItemInstance = [[TransmissionQueueItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTransmissionQueueItemInstance;
}
- (instancetype) defaultInstance {
  return defaultTransmissionQueueItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSequenceId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSequenceId) {
    [output writeInt32:1 value:self.sequenceId];
  }
  if (self.hasDiff) {
    [output writeData:2 value:self.diff];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSequenceId) {
    size_ += computeInt32Size(1, self.sequenceId);
  }
  if (self.hasDiff) {
    size_ += computeDataSize(2, self.diff);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TransmissionQueueItem*) parseFromData:(NSData*) data {
  return (TransmissionQueueItem*)[[[TransmissionQueueItem builder] mergeFromData:data] build];
}
+ (TransmissionQueueItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionQueueItem*)[[[TransmissionQueueItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TransmissionQueueItem*) parseFromInputStream:(NSInputStream*) input {
  return (TransmissionQueueItem*)[[[TransmissionQueueItem builder] mergeFromInputStream:input] build];
}
+ (TransmissionQueueItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionQueueItem*)[[[TransmissionQueueItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionQueueItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TransmissionQueueItem*)[[[TransmissionQueueItem builder] mergeFromCodedInputStream:input] build];
}
+ (TransmissionQueueItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionQueueItem*)[[[TransmissionQueueItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionQueueItemBuilder*) builder {
  return [[TransmissionQueueItemBuilder alloc] init];
}
+ (TransmissionQueueItemBuilder*) builderWithPrototype:(TransmissionQueueItem*) prototype {
  return [[TransmissionQueueItem builder] mergeFrom:prototype];
}
- (TransmissionQueueItemBuilder*) builder {
  return [TransmissionQueueItem builder];
}
- (TransmissionQueueItemBuilder*) toBuilder {
  return [TransmissionQueueItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSequenceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sequenceId", [NSNumber numberWithInteger:self.sequenceId]];
  }
  if (self.hasDiff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diff", self.diff];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TransmissionQueueItem class]]) {
    return NO;
  }
  TransmissionQueueItem *otherMessage = other;
  return
      self.hasSequenceId == otherMessage.hasSequenceId &&
      (!self.hasSequenceId || self.sequenceId == otherMessage.sequenceId) &&
      self.hasDiff == otherMessage.hasDiff &&
      (!self.hasDiff || [self.diff isEqual:otherMessage.diff]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSequenceId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sequenceId] hash];
  }
  if (self.hasDiff) {
    hashCode = hashCode * 31 + [self.diff hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TransmissionQueueItemBuilder()
@property (strong) TransmissionQueueItem* resultQueueItem;
@end

@implementation TransmissionQueueItemBuilder
@synthesize resultQueueItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultQueueItem = [[TransmissionQueueItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultQueueItem;
}
- (TransmissionQueueItemBuilder*) clear {
  self.resultQueueItem = [[TransmissionQueueItem alloc] init];
  return self;
}
- (TransmissionQueueItemBuilder*) clone {
  return [TransmissionQueueItem builderWithPrototype:resultQueueItem];
}
- (TransmissionQueueItem*) defaultInstance {
  return [TransmissionQueueItem defaultInstance];
}
- (TransmissionQueueItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TransmissionQueueItem*) buildPartial {
  TransmissionQueueItem* returnMe = resultQueueItem;
  self.resultQueueItem = nil;
  return returnMe;
}
- (TransmissionQueueItemBuilder*) mergeFrom:(TransmissionQueueItem*) other {
  if (other == [TransmissionQueueItem defaultInstance]) {
    return self;
  }
  if (other.hasSequenceId) {
    [self setSequenceId:other.sequenceId];
  }
  if (other.hasDiff) {
    [self setDiff:other.diff];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TransmissionQueueItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TransmissionQueueItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSequenceId:[input readInt32]];
        break;
      }
      case 18: {
        [self setDiff:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasSequenceId {
  return resultQueueItem.hasSequenceId;
}
- (SInt32) sequenceId {
  return resultQueueItem.sequenceId;
}
- (TransmissionQueueItemBuilder*) setSequenceId:(SInt32) value {
  resultQueueItem.hasSequenceId = YES;
  resultQueueItem.sequenceId = value;
  return self;
}
- (TransmissionQueueItemBuilder*) clearSequenceId {
  resultQueueItem.hasSequenceId = NO;
  resultQueueItem.sequenceId = 0;
  return self;
}
- (BOOL) hasDiff {
  return resultQueueItem.hasDiff;
}
- (NSData*) diff {
  return resultQueueItem.diff;
}
- (TransmissionQueueItemBuilder*) setDiff:(NSData*) value {
  resultQueueItem.hasDiff = YES;
  resultQueueItem.diff = value;
  return self;
}
- (TransmissionQueueItemBuilder*) clearDiff {
  resultQueueItem.hasDiff = NO;
  resultQueueItem.diff = [NSData data];
  return self;
}
@end

@interface TransmissionChangeItem ()
@property SInt32 lastSequence;
@property (strong) NSData* diff;
@end

@implementation TransmissionChangeItem

- (BOOL) hasLastSequence {
  return !!hasLastSequence_;
}
- (void) setHasLastSequence:(BOOL) _value_ {
  hasLastSequence_ = !!_value_;
}
@synthesize lastSequence;
- (BOOL) hasDiff {
  return !!hasDiff_;
}
- (void) setHasDiff:(BOOL) _value_ {
  hasDiff_ = !!_value_;
}
@synthesize diff;
- (instancetype) init {
  if ((self = [super init])) {
    self.lastSequence = 0;
    self.diff = [NSData data];
  }
  return self;
}
static TransmissionChangeItem* defaultTransmissionChangeItemInstance = nil;
+ (void) initialize {
  if (self == [TransmissionChangeItem class]) {
    defaultTransmissionChangeItemInstance = [[TransmissionChangeItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTransmissionChangeItemInstance;
}
- (instancetype) defaultInstance {
  return defaultTransmissionChangeItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLastSequence) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLastSequence) {
    [output writeInt32:1 value:self.lastSequence];
  }
  if (self.hasDiff) {
    [output writeData:2 value:self.diff];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLastSequence) {
    size_ += computeInt32Size(1, self.lastSequence);
  }
  if (self.hasDiff) {
    size_ += computeDataSize(2, self.diff);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TransmissionChangeItem*) parseFromData:(NSData*) data {
  return (TransmissionChangeItem*)[[[TransmissionChangeItem builder] mergeFromData:data] build];
}
+ (TransmissionChangeItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionChangeItem*)[[[TransmissionChangeItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TransmissionChangeItem*) parseFromInputStream:(NSInputStream*) input {
  return (TransmissionChangeItem*)[[[TransmissionChangeItem builder] mergeFromInputStream:input] build];
}
+ (TransmissionChangeItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionChangeItem*)[[[TransmissionChangeItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionChangeItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TransmissionChangeItem*)[[[TransmissionChangeItem builder] mergeFromCodedInputStream:input] build];
}
+ (TransmissionChangeItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionChangeItem*)[[[TransmissionChangeItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionChangeItemBuilder*) builder {
  return [[TransmissionChangeItemBuilder alloc] init];
}
+ (TransmissionChangeItemBuilder*) builderWithPrototype:(TransmissionChangeItem*) prototype {
  return [[TransmissionChangeItem builder] mergeFrom:prototype];
}
- (TransmissionChangeItemBuilder*) builder {
  return [TransmissionChangeItem builder];
}
- (TransmissionChangeItemBuilder*) toBuilder {
  return [TransmissionChangeItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLastSequence) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastSequence", [NSNumber numberWithInteger:self.lastSequence]];
  }
  if (self.hasDiff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"diff", self.diff];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TransmissionChangeItem class]]) {
    return NO;
  }
  TransmissionChangeItem *otherMessage = other;
  return
      self.hasLastSequence == otherMessage.hasLastSequence &&
      (!self.hasLastSequence || self.lastSequence == otherMessage.lastSequence) &&
      self.hasDiff == otherMessage.hasDiff &&
      (!self.hasDiff || [self.diff isEqual:otherMessage.diff]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLastSequence) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lastSequence] hash];
  }
  if (self.hasDiff) {
    hashCode = hashCode * 31 + [self.diff hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TransmissionChangeItemBuilder()
@property (strong) TransmissionChangeItem* resultChangeItem;
@end

@implementation TransmissionChangeItemBuilder
@synthesize resultChangeItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultChangeItem = [[TransmissionChangeItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultChangeItem;
}
- (TransmissionChangeItemBuilder*) clear {
  self.resultChangeItem = [[TransmissionChangeItem alloc] init];
  return self;
}
- (TransmissionChangeItemBuilder*) clone {
  return [TransmissionChangeItem builderWithPrototype:resultChangeItem];
}
- (TransmissionChangeItem*) defaultInstance {
  return [TransmissionChangeItem defaultInstance];
}
- (TransmissionChangeItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TransmissionChangeItem*) buildPartial {
  TransmissionChangeItem* returnMe = resultChangeItem;
  self.resultChangeItem = nil;
  return returnMe;
}
- (TransmissionChangeItemBuilder*) mergeFrom:(TransmissionChangeItem*) other {
  if (other == [TransmissionChangeItem defaultInstance]) {
    return self;
  }
  if (other.hasLastSequence) {
    [self setLastSequence:other.lastSequence];
  }
  if (other.hasDiff) {
    [self setDiff:other.diff];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TransmissionChangeItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TransmissionChangeItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLastSequence:[input readInt32]];
        break;
      }
      case 18: {
        [self setDiff:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasLastSequence {
  return resultChangeItem.hasLastSequence;
}
- (SInt32) lastSequence {
  return resultChangeItem.lastSequence;
}
- (TransmissionChangeItemBuilder*) setLastSequence:(SInt32) value {
  resultChangeItem.hasLastSequence = YES;
  resultChangeItem.lastSequence = value;
  return self;
}
- (TransmissionChangeItemBuilder*) clearLastSequence {
  resultChangeItem.hasLastSequence = NO;
  resultChangeItem.lastSequence = 0;
  return self;
}
- (BOOL) hasDiff {
  return resultChangeItem.hasDiff;
}
- (NSData*) diff {
  return resultChangeItem.diff;
}
- (TransmissionChangeItemBuilder*) setDiff:(NSData*) value {
  resultChangeItem.hasDiff = YES;
  resultChangeItem.diff = value;
  return self;
}
- (TransmissionChangeItemBuilder*) clearDiff {
  resultChangeItem.hasDiff = NO;
  resultChangeItem.diff = [NSData data];
  return self;
}
@end

@interface TransmissionUserState ()
@property (strong) NSString* userName;
@property (strong) NSData* state;
@end

@implementation TransmissionUserState

- (BOOL) hasUserName {
  return !!hasUserName_;
}
- (void) setHasUserName:(BOOL) _value_ {
  hasUserName_ = !!_value_;
}
@synthesize userName;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) _value_ {
  hasState_ = !!_value_;
}
@synthesize state;
- (instancetype) init {
  if ((self = [super init])) {
    self.userName = @"";
    self.state = [NSData data];
  }
  return self;
}
static TransmissionUserState* defaultTransmissionUserStateInstance = nil;
+ (void) initialize {
  if (self == [TransmissionUserState class]) {
    defaultTransmissionUserStateInstance = [[TransmissionUserState alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTransmissionUserStateInstance;
}
- (instancetype) defaultInstance {
  return defaultTransmissionUserStateInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserName) {
    [output writeString:1 value:self.userName];
  }
  if (self.hasState) {
    [output writeData:2 value:self.state];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserName) {
    size_ += computeStringSize(1, self.userName);
  }
  if (self.hasState) {
    size_ += computeDataSize(2, self.state);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TransmissionUserState*) parseFromData:(NSData*) data {
  return (TransmissionUserState*)[[[TransmissionUserState builder] mergeFromData:data] build];
}
+ (TransmissionUserState*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionUserState*)[[[TransmissionUserState builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TransmissionUserState*) parseFromInputStream:(NSInputStream*) input {
  return (TransmissionUserState*)[[[TransmissionUserState builder] mergeFromInputStream:input] build];
}
+ (TransmissionUserState*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionUserState*)[[[TransmissionUserState builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionUserState*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TransmissionUserState*)[[[TransmissionUserState builder] mergeFromCodedInputStream:input] build];
}
+ (TransmissionUserState*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TransmissionUserState*)[[[TransmissionUserState builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TransmissionUserStateBuilder*) builder {
  return [[TransmissionUserStateBuilder alloc] init];
}
+ (TransmissionUserStateBuilder*) builderWithPrototype:(TransmissionUserState*) prototype {
  return [[TransmissionUserState builder] mergeFrom:prototype];
}
- (TransmissionUserStateBuilder*) builder {
  return [TransmissionUserState builder];
}
- (TransmissionUserStateBuilder*) toBuilder {
  return [TransmissionUserState builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasState) {
    [output appendFormat:@"%@%@: %@\n", indent, @"state", self.state];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TransmissionUserState class]]) {
    return NO;
  }
  TransmissionUserState *otherMessage = other;
  return
      self.hasUserName == otherMessage.hasUserName &&
      (!self.hasUserName || [self.userName isEqual:otherMessage.userName]) &&
      self.hasState == otherMessage.hasState &&
      (!self.hasState || [self.state isEqual:otherMessage.state]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserName) {
    hashCode = hashCode * 31 + [self.userName hash];
  }
  if (self.hasState) {
    hashCode = hashCode * 31 + [self.state hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TransmissionUserStateBuilder()
@property (strong) TransmissionUserState* resultUserState;
@end

@implementation TransmissionUserStateBuilder
@synthesize resultUserState;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserState = [[TransmissionUserState alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserState;
}
- (TransmissionUserStateBuilder*) clear {
  self.resultUserState = [[TransmissionUserState alloc] init];
  return self;
}
- (TransmissionUserStateBuilder*) clone {
  return [TransmissionUserState builderWithPrototype:resultUserState];
}
- (TransmissionUserState*) defaultInstance {
  return [TransmissionUserState defaultInstance];
}
- (TransmissionUserState*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TransmissionUserState*) buildPartial {
  TransmissionUserState* returnMe = resultUserState;
  self.resultUserState = nil;
  return returnMe;
}
- (TransmissionUserStateBuilder*) mergeFrom:(TransmissionUserState*) other {
  if (other == [TransmissionUserState defaultInstance]) {
    return self;
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TransmissionUserStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TransmissionUserStateBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserName:[input readString]];
        break;
      }
      case 18: {
        [self setState:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasUserName {
  return resultUserState.hasUserName;
}
- (NSString*) userName {
  return resultUserState.userName;
}
- (TransmissionUserStateBuilder*) setUserName:(NSString*) value {
  resultUserState.hasUserName = YES;
  resultUserState.userName = value;
  return self;
}
- (TransmissionUserStateBuilder*) clearUserName {
  resultUserState.hasUserName = NO;
  resultUserState.userName = @"";
  return self;
}
- (BOOL) hasState {
  return resultUserState.hasState;
}
- (NSData*) state {
  return resultUserState.state;
}
- (TransmissionUserStateBuilder*) setState:(NSData*) value {
  resultUserState.hasState = YES;
  resultUserState.state = value;
  return self;
}
- (TransmissionUserStateBuilder*) clearState {
  resultUserState.hasState = NO;
  resultUserState.state = [NSData data];
  return self;
}
@end

@interface TransmissionBuilder()
@property (strong) Transmission* resultTransmission;
@end

@implementation TransmissionBuilder
@synthesize resultTransmission;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTransmission = [[Transmission alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTransmission;
}
- (TransmissionBuilder*) clear {
  self.resultTransmission = [[Transmission alloc] init];
  return self;
}
- (TransmissionBuilder*) clone {
  return [Transmission builderWithPrototype:resultTransmission];
}
- (Transmission*) defaultInstance {
  return [Transmission defaultInstance];
}
- (Transmission*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Transmission*) buildPartial {
  Transmission* returnMe = resultTransmission;
  self.resultTransmission = nil;
  return returnMe;
}
- (TransmissionBuilder*) mergeFrom:(Transmission*) other {
  if (other == [Transmission defaultInstance]) {
    return self;
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasSequenceId) {
    [self setSequenceId:other.sequenceId];
  }
  if (other.hasServerName) {
    [self setServerName:other.serverName];
  }
  if (other.hasUserName) {
    [self setUserName:other.userName];
  }
  if (other.userListArray.count > 0) {
    if (resultTransmission.userListArray == nil) {
      resultTransmission.userListArray = [[NSMutableArray alloc] initWithArray:other.userListArray];
    } else {
      [resultTransmission.userListArray addObjectsFromArray:other.userListArray];
    }
  }
  if (other.hasDocument) {
    [self mergeDocument:other.document];
  }
  if (other.hasAckSender) {
    [self setAckSender:other.ackSender];
  }
  if (other.queueItemsArray.count > 0) {
    if (resultTransmission.queueItemsArray == nil) {
      resultTransmission.queueItemsArray = [[NSMutableArray alloc] initWithArray:other.queueItemsArray];
    } else {
      [resultTransmission.queueItemsArray addObjectsFromArray:other.queueItemsArray];
    }
  }
  if (other.hasChangeItem) {
    [self mergeChangeItem:other.changeItem];
  }
  if (other.statesArray.count > 0) {
    if (resultTransmission.statesArray == nil) {
      resultTransmission.statesArray = [[NSMutableArray alloc] initWithArray:other.statesArray];
    } else {
      [resultTransmission.statesArray addObjectsFromArray:other.statesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TransmissionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TransmissionBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        TransmissionMessageType value = (TransmissionMessageType)[input readEnum];
        if (TransmissionMessageTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        [self setSequenceId:[input readInt32]];
        break;
      }
      case 26: {
        [self setServerName:[input readString]];
        break;
      }
      case 34: {
        [self setUserName:[input readString]];
        break;
      }
      case 42: {
        TransmissionUserBuilder* subBuilder = [TransmissionUser builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserList:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        TransmissionDocumentBuilder* subBuilder = [TransmissionDocument builder];
        if (self.hasDocument) {
          [subBuilder mergeFrom:self.document];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDocument:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setAckSender:[input readInt32]];
        break;
      }
      case 66: {
        TransmissionQueueItemBuilder* subBuilder = [TransmissionQueueItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addQueueItems:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        TransmissionChangeItemBuilder* subBuilder = [TransmissionChangeItem builder];
        if (self.hasChangeItem) {
          [subBuilder mergeFrom:self.changeItem];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setChangeItem:[subBuilder buildPartial]];
        break;
      }
      case 82: {
        TransmissionUserStateBuilder* subBuilder = [TransmissionUserState builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addStates:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasType {
  return resultTransmission.hasType;
}
- (TransmissionMessageType) type {
  return resultTransmission.type;
}
- (TransmissionBuilder*) setType:(TransmissionMessageType) value {
  resultTransmission.hasType = YES;
  resultTransmission.type = value;
  return self;
}
- (TransmissionBuilder*) clearType {
  resultTransmission.hasType = NO;
  resultTransmission.type = TransmissionMessageTypeInitial;
  return self;
}
- (BOOL) hasSequenceId {
  return resultTransmission.hasSequenceId;
}
- (SInt32) sequenceId {
  return resultTransmission.sequenceId;
}
- (TransmissionBuilder*) setSequenceId:(SInt32) value {
  resultTransmission.hasSequenceId = YES;
  resultTransmission.sequenceId = value;
  return self;
}
- (TransmissionBuilder*) clearSequenceId {
  resultTransmission.hasSequenceId = NO;
  resultTransmission.sequenceId = 0;
  return self;
}
- (BOOL) hasServerName {
  return resultTransmission.hasServerName;
}
- (NSString*) serverName {
  return resultTransmission.serverName;
}
- (TransmissionBuilder*) setServerName:(NSString*) value {
  resultTransmission.hasServerName = YES;
  resultTransmission.serverName = value;
  return self;
}
- (TransmissionBuilder*) clearServerName {
  resultTransmission.hasServerName = NO;
  resultTransmission.serverName = @"";
  return self;
}
- (BOOL) hasUserName {
  return resultTransmission.hasUserName;
}
- (NSString*) userName {
  return resultTransmission.userName;
}
- (TransmissionBuilder*) setUserName:(NSString*) value {
  resultTransmission.hasUserName = YES;
  resultTransmission.userName = value;
  return self;
}
- (TransmissionBuilder*) clearUserName {
  resultTransmission.hasUserName = NO;
  resultTransmission.userName = @"";
  return self;
}
- (NSMutableArray *)userList {
  return resultTransmission.userListArray;
}
- (TransmissionUser*)userListAtIndex:(NSUInteger)index {
  return [resultTransmission userListAtIndex:index];
}
- (TransmissionBuilder *)addUserList:(TransmissionUser*)value {
  if (resultTransmission.userListArray == nil) {
    resultTransmission.userListArray = [[NSMutableArray alloc]init];
  }
  [resultTransmission.userListArray addObject:value];
  return self;
}
- (TransmissionBuilder *)setUserListArray:(NSArray *)array {
  resultTransmission.userListArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TransmissionBuilder *)clearUserList {
  resultTransmission.userListArray = nil;
  return self;
}
- (BOOL) hasDocument {
  return resultTransmission.hasDocument;
}
- (TransmissionDocument*) document {
  return resultTransmission.document;
}
- (TransmissionBuilder*) setDocument:(TransmissionDocument*) value {
  resultTransmission.hasDocument = YES;
  resultTransmission.document = value;
  return self;
}
- (TransmissionBuilder*) setDocumentBuilder:(TransmissionDocumentBuilder*) builderForValue {
  return [self setDocument:[builderForValue build]];
}
- (TransmissionBuilder*) mergeDocument:(TransmissionDocument*) value {
  if (resultTransmission.hasDocument &&
      resultTransmission.document != [TransmissionDocument defaultInstance]) {
    resultTransmission.document =
      [[[TransmissionDocument builderWithPrototype:resultTransmission.document] mergeFrom:value] buildPartial];
  } else {
    resultTransmission.document = value;
  }
  resultTransmission.hasDocument = YES;
  return self;
}
- (TransmissionBuilder*) clearDocument {
  resultTransmission.hasDocument = NO;
  resultTransmission.document = [TransmissionDocument defaultInstance];
  return self;
}
- (BOOL) hasAckSender {
  return resultTransmission.hasAckSender;
}
- (SInt32) ackSender {
  return resultTransmission.ackSender;
}
- (TransmissionBuilder*) setAckSender:(SInt32) value {
  resultTransmission.hasAckSender = YES;
  resultTransmission.ackSender = value;
  return self;
}
- (TransmissionBuilder*) clearAckSender {
  resultTransmission.hasAckSender = NO;
  resultTransmission.ackSender = 0;
  return self;
}
- (NSMutableArray *)queueItems {
  return resultTransmission.queueItemsArray;
}
- (TransmissionQueueItem*)queueItemsAtIndex:(NSUInteger)index {
  return [resultTransmission queueItemsAtIndex:index];
}
- (TransmissionBuilder *)addQueueItems:(TransmissionQueueItem*)value {
  if (resultTransmission.queueItemsArray == nil) {
    resultTransmission.queueItemsArray = [[NSMutableArray alloc]init];
  }
  [resultTransmission.queueItemsArray addObject:value];
  return self;
}
- (TransmissionBuilder *)setQueueItemsArray:(NSArray *)array {
  resultTransmission.queueItemsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TransmissionBuilder *)clearQueueItems {
  resultTransmission.queueItemsArray = nil;
  return self;
}
- (BOOL) hasChangeItem {
  return resultTransmission.hasChangeItem;
}
- (TransmissionChangeItem*) changeItem {
  return resultTransmission.changeItem;
}
- (TransmissionBuilder*) setChangeItem:(TransmissionChangeItem*) value {
  resultTransmission.hasChangeItem = YES;
  resultTransmission.changeItem = value;
  return self;
}
- (TransmissionBuilder*) setChangeItemBuilder:(TransmissionChangeItemBuilder*) builderForValue {
  return [self setChangeItem:[builderForValue build]];
}
- (TransmissionBuilder*) mergeChangeItem:(TransmissionChangeItem*) value {
  if (resultTransmission.hasChangeItem &&
      resultTransmission.changeItem != [TransmissionChangeItem defaultInstance]) {
    resultTransmission.changeItem =
      [[[TransmissionChangeItem builderWithPrototype:resultTransmission.changeItem] mergeFrom:value] buildPartial];
  } else {
    resultTransmission.changeItem = value;
  }
  resultTransmission.hasChangeItem = YES;
  return self;
}
- (TransmissionBuilder*) clearChangeItem {
  resultTransmission.hasChangeItem = NO;
  resultTransmission.changeItem = [TransmissionChangeItem defaultInstance];
  return self;
}
- (NSMutableArray *)states {
  return resultTransmission.statesArray;
}
- (TransmissionUserState*)statesAtIndex:(NSUInteger)index {
  return [resultTransmission statesAtIndex:index];
}
- (TransmissionBuilder *)addStates:(TransmissionUserState*)value {
  if (resultTransmission.statesArray == nil) {
    resultTransmission.statesArray = [[NSMutableArray alloc]init];
  }
  [resultTransmission.statesArray addObject:value];
  return self;
}
- (TransmissionBuilder *)setStatesArray:(NSArray *)array {
  resultTransmission.statesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TransmissionBuilder *)clearStates {
  resultTransmission.statesArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
